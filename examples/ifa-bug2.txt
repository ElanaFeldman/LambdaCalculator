# One can write arbitrary comments in this file after hashes,
# but keep in mind that students will be able to see such comments.

# The first non-comment line of the file is the title of the
# assignment.

Homework 3: Generalized Quantifiers

# Next, typing conventions are entered. If no typing conventions
# are given, some defaults are used.

constants of type e : a b c paule knut john
variables of type n : d
variables of type e : x-z
variables of type <e,t> : P-Q X-Z
variables of type <n,t> : D
constants of type <e*s,t>: girl
constants of type <e*s,n>: age height
#constants of type <e*n*s,t>: age-at-least
constants of type <nt,n>: max
constants of type <n*n,n>: sum
constants of type n: two-inches
constants of type <t,t>: predicted
variables of type s : w v w'
variables of type <s,t> : p
variables of type <t,t>: S

# The following directive instructs the program to
# interpret multiple-letter constants and variables
# properly.

multiple letter identifiers

# "use rule" directives are for tree evaluation exercises.
# They indicate which composition rules are available
# at nonterminals.

use rule function application
use rule non-branching nodes
use rule predicate modification
use rule lambda abstraction
use rule intensional function application

# Next, lexical entries provided to the student are given.
# A word (i.e. "sleep") can be given any number of lexical
# entry choices by repeating the "define" directive multiple
# times. Students are able to add their own lexical entries
# as well.

define Knut: knut
define Paule: paule
define John: john
define every: LP.LQ.Ax.[P(x)->Q(x)]
define girl: Lx.girl(x,w)
#define old : Ld.Lx.[age-at-least(x,d,w)]
define old : Ld.Lx.[age(x,w) >= d]
define tall : Ld.Lx.[height(x,w) >= d]
define er1: LD.LD'.[max(D') > max(D)]
define er: Ld.Ld'.[d'>d]
define er-diff: Ld.Ld'.Ld''.[d'' > sum(d,d')]
define max: LD.max(D)
define two-inches: two-inches
#define I-had-predicted: predicted
#define I-had-predicted: Lp.Aw.[accessible(w) -> p]
define I-had-predicted: Lp[Av.[accessible(w,v) -> p(v)]] 

# Finally, the exercises themselves are entered.

exercise tree
title Formulating NatLg denotations as lambda-expressions
directions Do the derivation.



instructions John is taller than I had predicted (QR of intensional verb, only available reading)
[ I-had-predicted [ 3<S> [ [ er [ (than) [ max [2<n> [ t<S>_3 [ John [(is) [t<n>_2 tall ]]]]]]]] [max [ 2<n> [John [(is) [t<n>_2 tall]]]]]]]]
