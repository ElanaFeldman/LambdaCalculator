/*
 * TeacherToolWindow.java
 *
 * Created on January 13, 2007, 3:27 PM
 */

package lambdacalc.gui;

import java.io.*;
import java.util.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.*;
import lambdacalc.exercises.*;

/**
 *
 * @author  tauberer
 */
public class TeacherToolWindow extends javax.swing.JFrame {
    static TeacherToolWindow singleton;
    
    public static void showWindow() {
        if (singleton == null) {
            singleton = new TeacherToolWindow();
        
            // Ask the user to open a directory immediately,
            // but if user cancels, don't bother showing the window.
            if (!singleton.onOpen()) {
                singleton = null;
                return;
            }
        }
        
        singleton.show();
    }
    
    public static void disposeWindow() {
        if (singleton != null)
            singleton.dispose();
    }
    
    /** Creates new form TeacherToolWindow */
    public TeacherToolWindow() {
        initComponents();

        MainWindow.initializeJFileChooser(fileChooser, false, true);
        
        fileTable.getSelectionModel().addListSelectionListener(new SelectionListener());
        fileTable.getColumnModel().getSelectionModel().addListSelectionListener(new SelectionListener());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        fileChooser = new javax.swing.JFileChooser();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        fileTable = new javax.swing.JTable();
        statsField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jOpenMenuItem = new javax.swing.JMenuItem();
        jExitMenuItem = new javax.swing.JMenuItem();

        fileChooser.setApproveButtonText("Open Directory");
        fileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setTitle("Lambda Teacher Tool");
        jPanel1.setLayout(new java.awt.BorderLayout());

        fileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jPanel1.add(fileTable, java.awt.BorderLayout.CENTER);

        statsField.setEditable(false);
        statsField.setText(".... statistics ...");
        jPanel1.add(statsField, java.awt.BorderLayout.SOUTH);

        jScrollPane1.setViewportView(jPanel1);

        jSplitPane1.setLeftComponent(jScrollPane1);

        textArea.setColumns(20);
        textArea.setEditable(false);
        textArea.setFont(new java.awt.Font("Serif", 0, 14));
        textArea.setLineWrap(true);
        textArea.setRows(5);
        textArea.setWrapStyleWord(true);
        jScrollPane2.setViewportView(textArea);

        jSplitPane1.setRightComponent(jScrollPane2);

        jMenu1.setMnemonic('F');
        jMenu1.setText("File");
        jOpenMenuItem.setMnemonic('O');
        jOpenMenuItem.setText("Open Directory...");
        jOpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOpenMenuItemActionPerformed(evt);
            }
        });

        jMenu1.add(jOpenMenuItem);

        jExitMenuItem.setMnemonic('x');
        jExitMenuItem.setText("Exit Teacher Tool");
        jExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jExitMenuItemActionPerformed(evt);
            }
        });

        jMenu1.add(jExitMenuItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 850, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jOpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOpenMenuItemActionPerformed
        onOpen();
    }
    
    private boolean onOpen() {
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == fileChooser.APPROVE_OPTION) {
            loadDirectory(fileChooser.getSelectedFile());
            return true;
        }             
        return false;
    }//GEN-LAST:event_jOpenMenuItemActionPerformed

    private void jExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExitMenuItemActionPerformed
        this.hide();
    }//GEN-LAST:event_jExitMenuItemActionPerformed
    
    /**
     * @param args the command line arguments
     */
    /*public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TeacherToolWindow().setVisible(true);
            }
        });
    }*/
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JTable fileTable;
    private javax.swing.JMenuItem jExitMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jOpenMenuItem;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField statsField;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
    
    
    private static int numberCorrect(List exercises) {
        Iterator iter = exercises.iterator();
        int count = 0;
        while (iter.hasNext()) {
            Exercise e = (Exercise) iter.next();
            if (e.isDone()) {
                count++;
            }
        }
        return count;
    }
    
    Vector fileList = new Vector();
    
    private void loadDirectory(File directoryOfFiles) {
        // Load the student's work.
        
        DefaultTableModel model = new DefaultTableModel();
        
        model.addColumn("File Name"); // 0
        model.addColumn("Student");   // 1
        model.addColumn("Assignment");// 2
        model.addColumn("# of Exercises");//3
        model.addColumn("# Correct"); // 4
        model.addColumn("Solved?");   // 5
        
        fileList.clear();
        
        ArrayList scores = new ArrayList();
        
        File[] files = directoryOfFiles.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (MainWindow.isSerialized(files[i])) {
                Object[] row = new Object[6];
                row[0] = files[i].getName();

                try {
                    ExerciseFile ex = MainWindow.deserialize(files[i]);
                    row[1] = ex.getStudentName();
                    row[2] = ex.getTitle();
                    row[3] = new Integer(ex.exercises().size());
                    row[4] = new Integer(numberCorrect(ex.exercises()));
                    row[5] = new Boolean(ex.exercises().size()==numberCorrect(ex.exercises()));
                    
                    // This of course changes when we have new grading possibilities.
                    double score = 100.0 * (double)numberCorrect(ex.exercises()) / (double)ex.exercises().size();
                    
                    scores.add(new Double(score));
                } catch (Exception e) {
                    System.err.println(e.getStackTrace());
                    row[1] = "Error: " + e.getMessage();
                }
        
                model.addRow(row);
                fileList.add(files[i]);
            }
        }
        
        fileTable.setModel(model);
        
        textArea.setText("Click on a student's submitted assignment in the table to the left to see assignment details.");
        
        // Compute statistics.
        if (scores.size() == 0)
            statsField.setText("No student files found in this directory.");
        else
            statsField.setText("students: " + scores.size() + "; mean: " + formatDouble(mean(scores)) + "; std-dev: " + formatDouble(stdev(scores)) + "; median: " + formatDouble(median(scores)));
    }
    
    String formatDouble(double d) {
        return "" + Math.round(d * 10.0)/10.0; // round double to one decimal place
    }
    
    double mean(ArrayList scores) {
        double total = 0;
        for (Iterator i = scores.iterator(); i.hasNext(); )
            total += ((Double)i.next()).doubleValue();
        return total / (double)scores.size();
    }
    
    double stdev(ArrayList scores) {
        double mean = mean(scores);
        
        double total = 0;
        for (Iterator i = scores.iterator(); i.hasNext(); ) {
            double v = ((Double)i.next()).doubleValue() - mean;
            total += v*v;
        }
        return Math.sqrt(total / ((double)scores.size()-1));
    }

    double median(ArrayList scores) {
        ArrayList sortedScores = (ArrayList)scores.clone();
        Collections.sort(sortedScores);
        if (scores.size() % 2 == 1) {
            return ((Double)sortedScores.get((scores.size()-1) / 2)).doubleValue();
        } else {
            return (((Double)sortedScores.get(scores.size() / 2 - 1)).doubleValue() + ((Double)sortedScores.get(scores.size() / 2)).doubleValue())/2.0;
        }
    }

    class SelectionListener implements ListSelectionListener {
        public void valueChanged(ListSelectionEvent e) {
            if (fileTable.getSelectedRow() == -1) { textArea.setText(""); return; }
            showFileDetails((File)fileList.get(fileTable.getSelectedRow()));
        }
    }
    
    public void showFileDetails(File file) {
        try {
            ExerciseFile exfile = MainWindow.deserialize(file);
            
            String text = "";
            text += exfile.getTitle() + "\n";
            text += "\n";
            text += "Student: " + exfile.getStudentName() + "\n";
            text += "\n";
            
            text += numberCorrect(exfile.exercises()) + "/" + exfile.exercises().size() + " correct (" + (100 * numberCorrect(exfile.exercises()) / exfile.exercises().size()) + "%)\n";

            text += "\n";
            
            for (int i = 0; i < exfile.size(); i++) {
                ExerciseGroup g = exfile.getGroup(i);
                
                text += (char)('A' + i) + ". " + g.getTitle() + "\n";
                text += "\n";
                
                int groupCorrectCount = 0;
                
                for (int j = 0; j < g.size(); j++) {
                    Exercise ex = g.getItem(j);
                    
                    text += "   ";
                    
                    if (!ex.isDone())
                        text += ExerciseTreeModel.BALLOT_EX;
                    else
                        text += ExerciseTreeModel.CHECKMARK;
                    
                    text += "   " + (j+1) + ".  ";

                    text += ex.getExerciseText();
                    text += "\t";
                    
                    if (ex.hasBeenStarted() && !ex.isDone())
                        text += "Student's Last Answer: " + ex.getLastAnswer();
                    
                    text += "\n";
                    
                    if (ex.isDone())
                        groupCorrectCount++;
                }
                
                text += "\n";
                text += "   " + groupCorrectCount + "/" + g.size() + " correct (" + (100*groupCorrectCount/g.size()) + "%) in this section.\n";
                text += "\n";
            }
            
            textArea.setText(text);
        
        } catch (IOException e) {
            String text = "The file " + file.getPath() + " could not be opened: " + e.toString();
            textArea.setText(text);
            
        } catch (ExerciseFileFormatException e) {
            String text = "The file " + file.getPath() + " could not be opened.  It looks like this isn't a student work file for this program, or a bug in the program prevented the file from being read: " + e.toString();
            textArea.setText(text);
            
        }
    }
}
